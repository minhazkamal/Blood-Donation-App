<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" type="image/x-icon" href="/img/Logo-01.png">
    <title>Search Donor</title>
    <!-- ALL CSS RESET -->
    <link rel="stylesheet" type="text/css" href="/css/cssReset.css">
    <!-- BOOT STRAP v4.3.1 -->
    <link rel="stylesheet" type="text/css" href="/assets/css/bootstrap.min.css">
    <!-- font awosome v4 -->
    <link rel="stylesheet" type="text/css" href="/assets/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- STYLE SHEET for this page -->
    <link rel="stylesheet" type="text/css" href="/css/searchOrg.css">
    <!--[if lt IE 9]>
		<script src="assets/js/html5shiv.min.js"></script>
		<script src="assets/js/respond.min.js"></script>
	<![endif]-->
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>

    <!-- for mapbox -->
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.4.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.4.0/mapbox-gl.css' rel='stylesheet' />
    <!-- css -->
    <style>
        * {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        body {
            color: #404040;
            /* font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif; */
            margin: 0;
            padding: 0;
            -webkit-font-smoothing: antialiased;

        }

        h1 {
            font-size: 22px;
            margin: 0;
            font-weight: 400;
            line-height: 20px;
            padding: 20px 2px;
        }

        a {
            color: #404040;
            text-decoration: none;
        }

        a:hover {
            color: #101010;
        }

        /* The page is split between map and sidebar - the sidebar gets 1/3, map
        gets 2/3 of the page. You can adjust this to your personal liking. */
        .sidebar {
            position: absolute;
            width: 33.3333%;
            height: 100%;
            top: 0;
            left: 0;
            overflow: hidden;
            border-right: 1px solid rgba(0, 0, 0, 0.25);
        }

        .map {
            position: absolute;
            left: 33.3333%;
            width: 66.6666%;
            top: 0;
            bottom: 0;
        }

        .heading {
            background: none;
            border-bottom: 1px solid #eee;
            height: 60px;
            line-height: 60px;
            padding: 0 10px;
        }

        .listings {
            height: 90%;
            overflow: auto;
            padding-bottom: 60px;
        }

        .listings .item {
            display: block;
            border-bottom: 1px solid #eee;
            padding: 10px;
            text-decoration: none;
        }

        .listings .item:last-child {
            border-bottom: none;
        }

        .listings .item .title {
            display: block;
            color: #b9375e;
            font-weight: 700;
        }

        .view {
            color: #b9375e;
        }

        .listings .item .title small {
            font-weight: 400;
        }

        .listings .item.active .title,
        .listings .item .title:hover {
            color: #2f6690;
        }

        .view:hover {
            color: #2f6690;
        }

        .listings .item.active {
            background-color: #f8f8f8;
        }

        ::-webkit-scrollbar {
            width: 3px;
            height: 3px;
            border-left: 0;
            background: rgba(0, 0, 0, 0.1);
        }

        ::-webkit-scrollbar-track {
            background: none;
        }

        ::-webkit-scrollbar-thumb {
            background: #2f6690;
            border-radius: 0;
        }

        .clearfix {
            display: block;
        }

        .clearfix::after {
            content: '.';
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }

        /* css for interactivity of the map */
        /* Marker tweaks */
        .mapboxgl-popup-close-button {
            display: none;
        }

        .mapboxgl-popup-content {
            font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
            padding: 0;
            width: 180px;
        }

        .mapboxgl-popup-content-wrapper {
            padding: 1%;
        }

        .mapboxgl-popup-content h3 {
            background: #b9375e;
            color: #fff;
            margin: 0;
            display: block;
            padding: 10px;
            border-radius: 3px 3px 0 0;
            font-weight: 700;
            margin-top: -15px;
        }

        .mapboxgl-popup-content h4 {
            margin: 0;
            display: block;
            padding: 10px;
            font-weight: 400;
        }

        .mapboxgl-popup-content div {
            padding: 10px;
        }

        .mapboxgl-container .leaflet-marker-icon {
            cursor: pointer;
        }

        .mapboxgl-popup-anchor-top>.mapboxgl-popup-content {
            margin-top: 15px;
        }

        .mapboxgl-popup-anchor-top>.mapboxgl-popup-tip {
            border-bottom-color: #91c949;
        }

        .marker {
            background-image: url('/img/human-icon.png');
            background-size: cover;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
        }

        .marker_self {
            background-image: url('/img/self-map-icon.png');
            background-size: cover;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
        }

        #searchBar {
            width: 100%;
            height: 32px;
            border-radius: 3px;
            border: 1px solid #eaeaea;
            padding: 5px 10px;
            font-size: 12px;
        }

        #searchWrapper {
            position: relative;
        }

        #searchWrapper::after {
            content: 'üîç';
            position: absolute;
            top: 7px;
            right: 15px;
        }

        /* CSS for interactivity stops here */
    </style>
</head>

<body>

    <%- include ("./partials/navbar.ejs") %>
        <div class="main-container">
            <div class='sidebar'>
                <div class='heading'>
                    <h1>Search Donors</h1>
                    <!-- <form action="#">
                    <div class="input-container email">
                        <input id="email" name="email" placeholder="Organization Name" type="text">
                    </div>
                </form> -->

                </div>
                <div id="searchWrapper">
                    <input type="text" name="searchBar" id="searchBar" placeholder="Start typing for search" />
                    <div id="resultFound"></div>
                </div>
                <div id='listings' class='listings'></div>
            </div>
            <div id="map" class="map">
                <!-- the map body -->
            </div>
        </div>
        <%- include ("./partials/footer.ejs") %>








            <!-- </script>
    <script src="assets/js/jquery-3.2.1.min.js"></script>
    <script src="assets/js/popper.min.js"></script>
    <script src="assets/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script> -->

            <script>
                var self_marker;
                $(document).ready(function () {    
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(function (position) {
                            console.log(position);
                            const center = [position.coords.longitude, position.coords.latitude];

                            map.setCenter(center);

                            var self = document.createElement('div');
                            self.className = 'marker_self';

                            self_marker = new mapboxgl.Marker(self)
                                .setLngLat(center)
                                .setPopup(new mapboxgl.Popup({ closeOnClick: true }) // add popups
                                    .setHTML('<h3>' + "Your Location" + '</h3>'))
                                .addTo(map);

                            addIDandDistanceandSort();
                            buildLocationList(stores);

                        }, function (error) {
                            if (error.code == error.PERMISSION_DENIED) {
                                // console.log("Hello");
                                $.ajax({
                                    type: 'GET',
                                    data: {},
                                    url: '/show-donor/owner-details',
                                    success: function (data) {
                                        // console.log(data);

                                        const center = [data.lat, data.lon];

                                        map.setCenter(center);

                                        var self = document.createElement('div');
                                        self.className = 'marker_self';

                                        self_marker = new mapboxgl.Marker(self)
                                            .setLngLat(center)
                                            .setPopup(new mapboxgl.Popup({ closeOnClick: true }) // add popups
                                                .setHTML('<h3>' + "Your Location" + '</h3>'))
                                            .addTo(map);

                                        addIDandDistanceandSort();
                                        buildLocationList(stores);
                                    }
                                });
                            }
                        });
                    }
                });
                /* This will let you use the .remove() function later on */
                if (!('remove' in Element.prototype)) {
                    Element.prototype.remove = function () {
                        if (this.parentNode) {
                            this.parentNode.removeChild(this);
                        }
                    };
                }

                function distance(lat2, lon2) {
                    const lngLat = self_marker.getLngLat();
                    var lat1 = lngLat.lng;
                    var lon1 = lngLat.lat;
                    // console.log(lat1, lon1);
                    // console.log(lat2, lon2);
                    var minimum;
                    $.ajax({
                        type: 'GET',
                        data: {},
                        async: false,
                        url: `https://api.mapbox.com/directions-matrix/v1/mapbox/driving/${lat1},${lon1};${lat2},${lon2}?annotations=distance&access_token=${mapboxgl.accessToken}`,
                        success: function (data) {
                            // console.log(data.distances[0][1]);
                            minimum = data.distances[0][1] / 1000;
                        }
                    });
                    return minimum;
                    // var p = 0.017453292519943295;    // Math.PI / 180
                    // var c = Math.cos;
                    // var a = 0.5 - c((lat2 - lat1) * p) / 2 +
                    //     c(lat1 * p) * c(lat2 * p) *
                    //     (1 - c((lon2 - lon1) * p)) / 2;

                    // return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
                }

                var stores;

                $.ajax({
                    type: 'GET',
                    data: {},
                    async: false,
                    url: '/show-donor/details',
                    success: function (data) {
                        // console.log(data);
                        stores = data;
                    }
                });

                // console.log("After ajax");

                // var stores = {
                //     "type": "FeatureCollection",
                //     "features": [
                //         {
                //             "type": "Feature",
                //             "geometry": {
                //                 "type": "Point",
                //                 "coordinates": [
                //                     90.396524,
                //                     23.725869
                //                 ]
                //             },
                //             "properties": {
                //                 "contact": "01867057600",
                //                 "address": "Shewrapara",
                //                 "title": "Minhaz Kamal"
                //             }
                //         }]

                mapboxgl.accessToken = 'pk.eyJ1IjoiaW50cmljYXRlLXBvdGF0byIsImEiOiJja3M0M2VzY3AyMmhmMnBvOTB4bnVuaHVtIn0.eqxegwotqUt-4XoroDJl2g';

                var map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/light-v10',
                    // latitude, longitude
                    center: [90.41233760851503, 23.73125557117023],
                    // center: [90.3737413, 23.7911877],
                    zoom: 13,
                    scrollZoom: true
                });

                function addIDandDistanceandSort() {
                    stores.features.forEach(function (store) {
                        store.properties.distance = distance(store.geometry.coordinates[0], store.geometry.coordinates[1]).toFixed(2);
                    });

                    stores.features.sort(function (a, b) {
                        return parseFloat(a.properties.distance) - parseFloat(b.properties.distance);
                    });

                    stores.features.forEach(function (store, i) {
                        store.properties.id = i;
                    });
                }

                // console.log(stores.features.length);
                /* Adding Distance from initial Position to each store */
                // stores.features.forEach(function (store) {
                //     store.properties.distance = distance(store.geometry.coordinates[0], store.geometry.coordinates[0]);
                // });


                /* Assign a unique ID to each store */
                // stores.features.forEach(function (store, i) {
                //     store.properties.id = i;
                // });

                // this code to handle when a location circle on the map is clicked
                map.on('click', function (e) {
                    /* Determine if a feature in the "locations" layer exists at that point. */
                    var features = map.queryRenderedFeatures(e.point, {
                        layers: ['locations']
                    });

                    /* If yes, then: */
                    if (features.length) {
                        var clickedPoint = features[0];

                        /* Fly to the point */
                        flyToStore(clickedPoint);

                        /* Close all other popups and display popup for clicked store */
                        createPopUp(clickedPoint);

                        /* Highlight listing in sidebar (and remove highlight for all other listings) */
                        var activeItem = document.getElementsByClassName('active');
                        if (activeItem[0]) {
                            activeItem[0].classList.remove('active');
                        }
                        var listing = document.getElementById('listing-' + clickedPoint.properties.id);
                        listing.classList.add('active');
                    }
                });

                const listingsE1 = document.getElementById('listings');
                const resultE1 = document.getElementById('resultFound');
                resultE1.style.background = 'linear-gradient(to bottom, #00ffff 0%, #0066ff 100%)';
                /* Building The list of Locations */
                function buildLocationList(data) {
                    // console.log("Hello");
                    // addIDandDistanceandSort(data);
                    // console.log(data);
                    const result_number = document.createElement('p');
                    result_number.style.textAlign = 'center';
                    result_number.style.fontWeight = 'bold';
                    // Clear any existing listings
                    listingsE1.innerHTML = '';
                    resultE1.innerHTML = '';
                    // console.log(data.features.length);
                    if (data.features.length) {
                        result_number.textContent = data.features.length + ' results found';
                        resultE1.appendChild(result_number);

                        data.features.forEach(function (store, i) {
                            /**
                             * Create a shortcut for `store.properties`,
                             * which will be used several times below.
                            **/
                            var prop = store.properties;

                            /* Add a new listing section to the sidebar. */
                            var listings = document.getElementById('listings');
                            var listing = listings.appendChild(document.createElement('div'));
                            /* Assign a unique `id` to the listing. */
                            listing.id = "listing-" + data.features[i].properties.id;
                            /* Assign the `item` class to each listing for styling. */
                            listing.className = 'item';

                            /* Add the link to the individual listing created above. */
                            var link = listing.appendChild(document.createElement('a'));
                            link.href = '#';
                            link.className = 'title';
                            link.id = "link-" + prop.id;
                            link.innerHTML = prop.name + ' (' + prop.bg + ')';

                            /* Add details to the individual listing. */
                            var details = listing.appendChild(document.createElement('div'));
                            details.innerHTML = prop.address;
                            details.innerHTML += '<br>Gender: ' + prop.gender;
                            if (prop.contact) {
                                details.innerHTML += '<br>Contact: ' + prop.contact;
                            }
                            if (prop.distance) {
                                // var roundedDistance = Math.round(prop.distance * 100) / 100;
                                details.innerHTML +=
                                    '<p><strong>' + prop.distance + ' kms away</strong></p>';
                            }

                            var profile_link = details.appendChild(document.createElement('a'));
                            profile_link.className = 'view';
                            profile_link.href = `/view/${prop.user_id}`;
                            profile_link.target = 'blank';
                            profile_link.innerHTML = 'View Profile';

                            // this code to handle when a user clicks a link in the sidebar:
                            link.addEventListener('click', function (e) {
                                for (var i = 0; i < data.features.length; i++) {
                                    if (this.id === "link-" + data.features[i].properties.id) {
                                        var clickedListing = data.features[i];
                                        flyToStore(clickedListing);
                                        createPopUp(clickedListing);
                                    }
                                }
                                var activeItem = document.getElementsByClassName('active');
                                if (activeItem[0]) {
                                    activeItem[0].classList.remove('active');
                                }
                                this.parentNode.classList.add('active');
                            });
                        });
                    }
                    else if (data.features.length === 0 && searchBar.value !== '') {
                        result_number.textContent = 'No results found';
                        resultE1.appendChild(result_number);
                    }
                }

                // Functions For Interactivity
                function flyToStore(currentFeature) {
                    map.flyTo({
                        center: currentFeature.geometry.coordinates,
                        zoom: 15
                    });
                }

                function createPopUp(currentFeature) {
                    var popUps = document.getElementsByClassName('mapboxgl-popup');
                    /** Check if there is already a popup on the map and if so, remove it */
                    if (popUps[0]) popUps[0].remove();

                    // create a HTML element for each feature
                    var el = document.createElement('div');
                    el.className = 'marker';

                    new mapboxgl.Marker(el)
                        .setLngLat(currentFeature.geometry.coordinates)
                        // .setPopup(new mapboxgl.Popup({ closeOnClick: true }) // add popups
                        //     .setHTML('<h3>' + currentFeature.properties.title + '</h3><h4>' + currentFeature.properties.address + '</h4>'))
                        .addTo(map);

                    // var popup = new mapboxgl.Popup({ closeOnClick: false })
                    //     .setLngLat(currentFeature.geometry.coordinates)
                    //     .setHTML('<h3>'+currentFeature.properties.address+'</h3>' +
                    //         '<h4>' + currentFeature.properties.city + '</h4>')
                    //     .addTo(map);
                }
                ///////////////////////////////////////

                map.on('load', () => {
                    // Load an image from an external URL.
                    map.loadImage(
                        '/img/human-icon.png',
                        (error, image) => {
                            if (error) throw error;

                            // Add the image to the map style.
                            map.addImage('map-icon', image);


                            // Add a layer to use the image to represent the data.
                            map.addLayer({
                                "id": "locations",
                                "type": "symbol",
                                /* Add a GeoJSON source containing place coordinates and information. */
                                "source": {
                                    "type": "geojson",
                                    "data": stores
                                },
                                "layout": {
                                    "icon-image": 'map-icon',
                                    "icon-size": 0.10,
                                }
                            });

                            // buildLocationList(stores);
                        }
                    );
                });

                const popup = new mapboxgl.Popup({
                    closeButton: false,
                    closeOnClick: false
                });

                map.on('mouseenter', 'locations', (e) => {
                    // Change the cursor style as a UI indicator.
                    map.getCanvas().style.cursor = 'pointer';

                    // Copy coordinates array.
                    const coordinates = e.features[0].geometry.coordinates.slice();
                    const description = e.features[0].properties.description;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    // Populate the popup and set its coordinates
                    // based on the feature found.
                    popup.setLngLat(coordinates).setHTML('<h3>' + e.features[0].properties.name + ' (' + e.features[0].properties.bg + ')' + '</h3><h4>' + e.features[0].properties.address + '</h4>').addTo(map);
                });

                map.on('mouseleave', 'locations', () => {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                });

                const searchBar = document.getElementById('searchBar');

                searchBar.addEventListener('keyup', (e) => {
                    const searchString = e.target.value.toLowerCase();

                    const filteredStores = {
                        type: 'FeatureCollection',
                        features: []
                    }

                    filteredStores.features = stores.features.filter((store) => {
                        return (
                            store.properties.name.toLowerCase().includes(searchString) ||
                            store.properties.bg.toLowerCase().includes(searchString) ||
                            store.properties.address.toLowerCase().includes(searchString)
                        );
                    });
                    // console.log(stores);
                    // console.log(filteredStores);

                    buildLocationList(filteredStores);
                });

        // buildLocationList(stores);

        // map.on('load', function (e) {

        //     /* Add the data to your map as a layer */
        // map.addLayer({
        //     "id": "locations",
        //     "type": "symbol",
        //     /* Add a GeoJSON source containing place coordinates and information. */
        //     "source": {
        //         "type": "geojson",
        //         "data": stores
        //     },
        //     "layout": {
        //         "icon-image": '/img/map-icon.png',
        //         "icon-size": 0.25,
        //         "icon-allow-overlap": true,
        //         "text-allow-overlap": true
        //     }
        // });

        //     buildLocationList(stores);
        // });
            </script>
            <script src="assets/js/jquery-3.2.1.min.js"></script>
            <script src="assets/js/popper.min.js"></script>
            <script src="assets/js/bootstrap.min.js"></script>
            <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
                integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
                crossorigin="anonymous"></script>
            <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
                crossorigin="anonymous"></script>


</body>

</html>